diff --git a/node_modules/analytics-node/index.js b/node_modules/analytics-node/index.js
index 4ee4917..b396039 100644
--- a/node_modules/analytics-node/index.js
+++ b/node_modules/analytics-node/index.js
@@ -12,7 +12,7 @@ const version = require('./package.json').version
 const isString = require('lodash.isstring')
 
 const setImmediate = global.setImmediate || process.nextTick.bind(process)
-const noop = () => {}
+const noop = () => { }
 
 class Analytics {
   /**
@@ -25,9 +25,10 @@ class Analytics {
    *   @property {Number} flushInterval (default: 10000)
    *   @property {String} host (default: 'https://api.segment.io')
    *   @property {Boolean} enable (default: true)
+   *   @property {Object} agent (default: undefined)
    */
 
-  constructor (writeKey, options) {
+  constructor(writeKey, options) {
     options = options || {}
 
     assert(writeKey, 'You must pass your Segment project\'s write key.')
@@ -39,6 +40,7 @@ class Analytics {
     this.flushAt = Math.max(options.flushAt, 1) || 20
     this.flushInterval = options.flushInterval || 10000
     this.flushed = false
+    this.agent = options.agent
     Object.defineProperty(this, 'enable', {
       configurable: false,
       writable: false,
@@ -53,7 +55,7 @@ class Analytics {
     })
   }
 
-  _validate (message, type) {
+  _validate(message, type) {
     try {
       looselyValidate(message, type)
     } catch (e) {
@@ -73,7 +75,7 @@ class Analytics {
    * @return {Analytics}
    */
 
-  identify (message, callback) {
+  identify(message, callback) {
     this._validate(message, 'identify')
     this.enqueue('identify', message, callback)
     return this
@@ -87,7 +89,7 @@ class Analytics {
    * @return {Analytics}
    */
 
-  group (message, callback) {
+  group(message, callback) {
     this._validate(message, 'group')
     this.enqueue('group', message, callback)
     return this
@@ -101,7 +103,7 @@ class Analytics {
    * @return {Analytics}
    */
 
-  track (message, callback) {
+  track(message, callback) {
     this._validate(message, 'track')
     this.enqueue('track', message, callback)
     return this
@@ -115,7 +117,7 @@ class Analytics {
    * @return {Analytics}
    */
 
-  page (message, callback) {
+  page(message, callback) {
     this._validate(message, 'page')
     this.enqueue('page', message, callback)
     return this
@@ -129,7 +131,7 @@ class Analytics {
    * @return {Analytics}
    */
 
-  screen (message, callback) {
+  screen(message, callback) {
     this._validate(message, 'screen')
     this.enqueue('screen', message, callback)
     return this
@@ -143,7 +145,7 @@ class Analytics {
    * @return {Analytics}
    */
 
-  alias (message, callback) {
+  alias(message, callback) {
     this._validate(message, 'alias')
     this.enqueue('alias', message, callback)
     return this
@@ -159,7 +161,7 @@ class Analytics {
    * @api private
    */
 
-  enqueue (type, message, callback) {
+  enqueue(type, message, callback) {
     callback = callback || noop
 
     if (!this.enable) {
@@ -225,7 +227,7 @@ class Analytics {
    * @return {Analytics}
    */
 
-  flush (callback) {
+  flush(callback) {
     callback = callback || noop
 
     if (!this.enable) {
@@ -272,7 +274,8 @@ class Analytics {
         username: this.writeKey
       },
       data,
-      headers
+      headers,
+      httpsAgent: this.agent
     }
 
     if (this.timeout) {
@@ -291,7 +294,7 @@ class Analytics {
       })
   }
 
-  _isErrorRetryable (error) {
+  _isErrorRetryable(error) {
     // Retry Network Errors.
     if (axiosRetry.isNetworkError(error)) {
       return true
